from capstone import *
from capstone.ppc import *   # powerpc
from capstone.arm import * 	 # ARM 32
from capstone.arm64 import * # ARM 64
import os, binascii


fp = open("codebreaker2.exe", "rb")
FP_CODE = fp.read()
code_base = (
	"\x43\x20\x0c\x07\x41\x56\xff\x17\x80\x20\x00\x00\x80\x3f\x00\x00\x10\x43\x23\x0e\xd0\x44\x00\x80\x4c\x43\x22\x02\x2d\x03\x00\x80\x7c\x43\x20\x14\x7c\x43\x20\x93\x4f\x20\x00\x21\x4c\xc8\x00\x21\x40\x82\x00\x14",
	"\x8d\x4c\x32\x08\x01\xd8\x81\xc6\x34\x12\x00\x00",
	"\x8d\x4c\x32\x08\x01\xd8\x81\xc6\x34\x12\x00\x00",
	"\x55\x48\x8b\x05\xb8\x13\x00\x00",
	"\xED\xFF\xFF\xEB\x04\xe0\x2d\xe5\x00\x00\x00\x00\xe0\x83\x22\xe5\xf1\x02\x03\x0e\x00\x00\xa0\xe3\x02\x30\xc1\xe7\x00\x00\x53\xe3",
	"\x10\xf1\x10\xe7\x11\xf2\x31\xe7\xdc\xa1\x2e\xf3\xe8\x4e\x62\xf3",
	"\x70\x47\xeb\x46\x83\xb0\xc9\x68",
	"\x4f\xf0\x00\x01\xbd\xe8\x00\x88",
	"\xef\xf3\x02\x80",
	"\xe0\x3b\xb2\xee\x42\x00\x01\xe1\x51\xf0\x7f\xf5",
	"\x0C\x10\x00\x97\x00\x00\x00\x00\x24\x02\x00\x0c\x8f\xa2\x00\x00\x34\x21\x34\x56",
	"\x56\x34\x21\x34\xc2\x17\x01\x00",
	"\x00\x07\x00\x07\x00\x11\x93\x7c\x01\x8c\x8b\x7c\x00\xc7\x48\xd0",
	"\xec\x80\x00\x19\x7c\x43\x22\xa0",
	"\x09\x00\x38\xd5\xbf\x40\x00\xd5\x0c\x05\x13\xd5\x20\x50\x02\x0e\x20\xe4\x3d\x0f\x00\x18\xa0\x5f\xa2\x00\xae\x9e\x9f\x37\x03\xd5\xbf\x33\x03\xd5\xdf\x3f\x03\xd5\x21\x7c\x02\x9b\x21\x7c\x00\x53\x00\x40\x21\x4b\xe1\x0b\x40\xb9\x20\x04\x81\xda\x20\x08\x02\x8b\x10\x5b\xe8\x3c",
	"\x80\x20\x00\x00\x80\x3f\x00\x00\x10\x43\x23\x0e\xd0\x44\x00\x80\x4c\x43\x22\x02\x2d\x03\x00\x80\x7c\x43\x20\x14\x7c\x43\x20\x93\x4f\x20\x00\x21\x4c\xc8\x00\x21",
	"\x80\xa0\x40\x02\x85\xc2\x60\x08\x85\xe8\x20\x01\x81\xe8\x00\x00\x90\x10\x20\x01\xd5\xf6\x10\x16\x21\x00\x00\x0a\x86\x00\x40\x02\x01\x00\x00\x00\x12\xbf\xff\xff\x10\xbf\xff\xff\xa0\x02\x00\x09\x0d\xbf\xff\xff\xd4\x20\x60\x00\xd4\x4e\x00\x16\x2a\xc2\x80\x03",
	"\x81\xa8\x0a\x24\x89\xa0\x10\x20\x89\xa0\x1a\x60\x89\xa0\x00\xe0",
	"\xed\x00\x00\x00\x00\x1a\x5a\x0f\x1f\xff\xc2\x09\x80\x00\x00\x00\x07\xf7\xeb\x2a\xff\xff\x7f\x57\xe3\x01\xff\xff\x7f\x57\xeb\x00\xf0\x00\x00\x24\xb2\x4f\x00\x78",
	"\xfe\x0f\xfe\x17\x13\x17\xc6\xfe\xec\x17\x97\xf8\xec\x4f\x1f\xfd\xec\x37\x07\xf2\x45\x5b\xf9\xfa\x02\x06\x1b\x10",
	FP_CODE,
)

errors_for_type = dict()

all_tests = (
        (CS_ARCH_X86, CS_MODE_16, "X86, 16 bit"),
        (CS_ARCH_X86, CS_MODE_32, "X86, 32 bit"),
        (CS_ARCH_X86, CS_MODE_64, "X86, 64 bit"),
        (CS_ARCH_ARM, CS_MODE_ARM, "ARM"),
        (CS_ARCH_ARM, CS_MODE_THUMB, "ARM THUMB"),
        (CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_MCLASS, "ARM THUMB MCLASS"),
        (CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_V8, "ARM V8"),
        (CS_ARCH_ARM64, CS_MODE_ARM, "ARM 64"),
        (CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_BIG_ENDIAN, "MIPS 32 BIG"),
        (CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_LITTLE_ENDIAN, "MIPS 32 LITTLE"),
        (CS_ARCH_MIPS, CS_MODE_MIPS32R6 + CS_MODE_MICRO + CS_MODE_BIG_ENDIAN, "MIPS 32R6 MICRO BIG"),
        (CS_ARCH_MIPS, CS_MODE_MIPS32R6 + CS_MODE_BIG_ENDIAN, "MIPS 32R6 BIG"),
        (CS_ARCH_PPC, CS_MODE_BIG_ENDIAN, "PPC BIG ENDIAN"),
        (CS_ARCH_SPARC, CS_MODE_BIG_ENDIAN, "SPARC BIG"),
        (CS_ARCH_SPARC, CS_MODE_BIG_ENDIAN + CS_MODE_V9, "SPARC BIG V9"),
        (CS_ARCH_SYSZ, 0, "SYSX"),
        (CS_ARCH_XCORE, 0, "XCORE"),
	)
for CODE in code_base:	
	for (arch, mode, platform) in all_tests:
		md = Cs(arch, mode) 
		k = 0
		error = 0
		while k < len(CODE):
			#As per x86 only need to look at first 15 bytes
			gen = md.disasm(CODE[k:k+16], k)
			try:
				i = gen.next()
			except StopIteration:
				#print "BAD"
				error +=1
				k+=1
				continue
			#print "0x%x:\t%s\t%s\t" %(i.address, i.mnemonic, i.op_str),
			m = 0
			while m < len(i.bytes):
				#print format(i.bytes[m], 'x').zfill(2),
				m+=1
			#print k
			k += len(i.bytes)
		#print "Platform: " + platform
		#print "Size of Input File: "+str(len(CODE))
		#print "Errors Decoding: "+str(error)
		errors_for_type[platform] = str(error)

	min = errors_for_type.itervalues().next()
	for key in errors_for_type:
		if errors_for_type[key] < min:
			min = errors_for_type[key]

	print "CLOSEST MATCH: "+ min
	for key in errors_for_type:
		if errors_for_type[key] == min:
			print "Possible Match is: "+ key

